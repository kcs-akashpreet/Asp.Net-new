
trigger:
- master
stages:
- stage: validate
  jobs:
  - job: validate
    continueOnError: false
    steps:
    - task: TerraformInstaller@0
      displayName: 'install'
      inputs:
        terraformVersion: '0.12.26'
    - task: TerraformTaskV1@0
      displayName: 'init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'terraform-sp'
        backendAzureRmResourceGroupName: 'terraform-rg'
        backendAzureRmStorageAccountName: 'sktkcsaccount'
        backendAzureRmContainerName: 'sktkcsaccount'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTaskV1@0
      displayName: "validate"
      inputs:
        provider: 'azurerm'
        command: 'validate'
- stage: tfdeploy
  jobs:
  - deployment: deploy_terraform
    continueOnError: false
    environment: 'dev'
    strategy:
     runOnce:
      deploy:
       steps:
         - checkout: self
         - task: TerraformInstaller@0
           displayName: 'install'
           inputs:
             terraformVersion: '0.12.26'
         - task: TerraformTaskV1@0
           displayName: 'init'
           inputs:
             provider: 'azurerm'
             command: 'init'
             backendServiceArm: 'terraform-sp'
             backendAzureRmResourceGroupName: 'terraform-rg'
             backendAzureRmStorageAccountName: 'sktkcsaccount'
             backendAzureRmContainerName: 'sktkcsaccount'
             backendAzureRmKey: 'terraform.tfstate'

         - task: TerraformTaskV1@0
           displayName: 'plan'
           inputs:
             provider: 'azurerm'
             command: 'plan'
             environmentServiceNameAzureRM: 'terraform-sp'

         - task: TerraformTaskV1@0
           displayName: 'apply'
           inputs:
             provider: 'azurerm'
             command: 'apply'
             environmentServiceNameAzureRM: 'terraform-sp'
- stage: build
  jobs:
  - job: build
    continueOnError: false
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildConfiguration: 'Release'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .Net Core sdk'
      inputs:
        packageType: 'sdk'
        version: 2.1.x
        performMultiLevelLookup: true
    
    
    - task: UseDotNet@2
      inputs:
        version: 2.1.x
      displayName: setdotnet version to use

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfigurations)'
    - task: DotNetCoreCLI@2
      displayName: binaries
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    
    - task: PublishBuildArtifacts@1
      displayName: publish
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: release
  jobs:
  - job: release
    continueOnError: false
    steps:
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'terraform-sp'
        appType: 'webApp'
        WebAppName: 'terraform-kcs'
        packageForLinux: '$(Build.ArtifactStagingDirectory)/drop/*.zip'